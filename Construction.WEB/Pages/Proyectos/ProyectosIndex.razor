@page "/proyectos"
@using Construction.Shared.Entities
@using Construction.WEB.Repositories
@using Construction.WEB.Shared

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> Proyectos
            <a class="btn btn-primary btn-sm float-end" href="/proyectos/create"><i class="bi bi-plus-circle"/>New Proyecto</a>

        </span>
</div>

    <div class="card-body">

<GenericList MyList="Proyectos">

    <Body>
    <table class="table table-striped">
        <thead>
            <tr>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Proyectos!)
            {
                <tr>
                    <td>
                                <a href="/proyectos/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                                <button @onclick=@(() => DeleteAsycn(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill"/> Borrar</button>
                    </td>
                    <td>
                        @item.Nombre
                    </td>
                    <td>
                        @item.Ubicacion
                    </td>

                        <td>
                        @item.Descripcion
                    </td>
                    <td>
                        @item.FechaInicio
                        </td>
                    <td>
                        @item.FechaFin
                        </td>

                </tr>
            }
        </tbody>
    </table>
            </Body>
        </GenericList>
    </div>
</div>

@code {
    public List<Proyecto>? Proyectos { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Proyecto>>("api/proyectos");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Proyectos = responseHttp.Response!;
    }

   

        private async Task DeleteAsycn(Proyecto proyecto)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Estas seguro de querer borrar el proyecto: {proyecto.Nombre}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync<Proyecto>($"api/proyectos/{proyecto.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                   navigationManager.NavigateTo("proyectos");
                }
                else
                {
                    var mensajeError = await responseHttp.GetErrorMessage();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                }
                return;
            }

            await LoadAsync();
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
        }
    
}

